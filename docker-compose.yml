services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./core/backend/app:/app/app
    environment:
      - ENV=${ENV}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - network
    restart: always

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./core/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - ENV=${ENV}
    command: ["pnpm", "run", "dev"]
    networks:
      - network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    depends_on:
      - redis
    networks:
      - network
    volumes:
      - redisinsight_data:/db

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: experts
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - network

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - network

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - network
    restart: always
    entrypoint: /bin/sh -c "sleep 10 && nginx -g 'daemon off;'"

  jenkins:
    build:
      context: ./docker/jenkins
      dockerfile: Dockerfile
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - DOCKER_GID=1000
    user: "1000:1000"
    volumes:
      - ./docker/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - network
    restart: always

networks:
  network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  redisinsight_data:
