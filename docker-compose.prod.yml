version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    image: experts-backend
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - network

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    image: experts-frontend
    container_name: frontend
    environment:
      ENV: production
    command: ["pnpm", "run", "build"]
    networks:
      - network

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    image: experts-nginx
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend
    networks:
      - network
    restart: always

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: experts
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - network

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
